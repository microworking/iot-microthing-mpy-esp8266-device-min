class HttpHandler:    def do_connect():    global conn_wait_time, debug_mode    conn_wait_time = 4    sta_if = network.WLAN(network.STA_IF)    time.sleep(2)    while not sta_if.isconnected():      if sta_if.isconnected():        if debug_mode: print('this the network config:', sta_if.ifconfig())        break      else:        if debug_mode: print('trying connect to network...')        if(conn_wait_time < 16): conn_wait_time = conn_wait_time + 1        sta_if.active(False)        sta_if.active(True)        sta_if.connect(wifi_ssid, wifi_pass)        time.sleep(conn_wait_time)    time.sleep(2)    if sta_if.isconnected():      if debug_mode: print('network is connected')     else:      if debug_mode: print('network disconnected')  def http_get(url, port):    try:      _, _, host, path = url.split('/', 3)      addr = socket.getaddrinfo(host, port)[0][-1]      s = socket.socket()      s.connect(addr)          for i in range(10):        try:          s.write(bytes('GET /%s HTTP/1.0\r\nHost: %s\r\n\r\n' % (path, host), 'utf8'))          return True          break        except:          return False          pass #TODO: tratar o erro para dar by pass por umas 20x ai reinicia o modulo      while True:        data = s.recv(100)        if data:            pass #print(str(data, 'utf8'), end='') #tratar 404, 500, etc        else:            break      s.close()    except Exception as ex:      print(ex)      return False      pass